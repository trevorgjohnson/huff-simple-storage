#include "./utils/ECDSA.huff"

/* Interface */
#define function setValue(uint256) nonpayable returns ()
#define function getValue() view returns (uint256)
#define function helloWorld() view returns (string)
#define function longString() view returns (string)
#define function recover(bytes32,uint8,bytes32,bytes32) view returns (address)
#define function prefixMessage(bytes32) view returns (bytes32)

#define event ReceivedPayment(address indexed, uint256)

#define error NotFound(bytes4)

/* Storage Slots */
#define constant VALUE_LOCATION = FREE_STORAGE_POINTER()

/* Main entry point */
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr

    dup1 __FUNC_SIG(setValue) eq set jumpi
    dup1 __FUNC_SIG(getValue) eq get jumpi
    dup1 __FUNC_SIG(helloWorld) eq helloWorld jumpi
    dup1 __FUNC_SIG(longString) eq longString jumpi
    dup1 __FUNC_SIG(recover) eq recover jumpi
    dup1 __FUNC_SIG(prefixMessage) eq prefixMessage jumpi

    callvalue receive jumpi     // [msg.sig]

    __ERROR(NotFound)           // [NotFound_selector, msg.sig]
    0x00 mstore                 // [msg.sig]
    0xE0 shl 0x04 mstore        // []
    0x24 0x00                   // [0x00, 0x24]
    revert

    set:
        SET_VALUE()
    get:
        GET_VALUE()
    helloWorld:
        HELLO_WORLD()
    longString:
        LONG_STRING()
    recover:
        RECOVER()
    prefixMessage:
        PREFIX_MESSAGE()


    receive:
        RECEIVE()
}

/* Methods */
/// ## Set Value Call
/// 
/// ### Calldata Layout
/// 
/// `selector . value`
/// 
/// | name     | size (bytes) |
/// | -------- | ------------ |
/// | selector | 4            |
/// | value    | 32           |
#define macro SET_VALUE() = takes (0) returns (0) {
    0x04 calldataload   // [value]
    [VALUE_LOCATION]    // [ptr, value]
    sstore              // []
}

/// ## Get Value Call
/// 
/// ### Calldata Layout
/// 
/// `selector`
/// 
/// | name     | size (bytes) |
/// | -------- | ------------ |
/// | selector | 4            |
#define macro GET_VALUE() = takes (0) returns (0) {
    // Load value from storage.
    [VALUE_LOCATION]   // [ptr]
    sload                // [value]

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

/// ## Hello World Call
/// 
/// ### Calldata Layout
/// 
/// `selector`
/// 
/// | name     | size (bytes) |
/// | -------- | ------------ |
/// | selector | 4            |
#define macro HELLO_WORLD() = takes (0) returns (0) {
    // store dynamic offset of 0x20 at 0x00
    0x20    // [0x20]
    0x00    // [0x00, 0x20]
    mstore  // []

    // store bytes for 'Hello, World!' at 0x40
    __RIGHTPAD(0x0d48656c6c6f2c20576f726c6421)  // [length + "Hello, World!"]

    // By including the length in the original string,
    // we need to mstore 1 byte less than 20 bytes to align the slots correctly 

    0x3F                                        // [length + "Hello, World!", 0x3F]
    mstore                                      // []

    // return full 96 bytes
    0x60 // [0x60] 
    0x00 // [0x00, 0x60] 
    return
}

/// ## Long String Call
/// 
/// ### Calldata Layout
/// 
/// `selector`
/// 
/// | name     | size (bytes) |
/// | -------- | ------------ |
/// | selector | 4            |
#define macro LONG_STRING() = takes (0) returns (0) {
    // store dynamic offset of 0x20 at 0x00
    0x20    // [0x20]
    0x00    // [0x00, 0x20]
    mstore  // []

    0x66    // [0x66]
    0x20    // 0x20
    mstore  // []

    0x4c6f72656d20697073756d20646f6c6f722073697420616d65742c2071756920  // [First 32 bytes]
    0x40
    mstore

    0x6d696e696d206c61626f7265206164697069736963696e67206d696e696d2073  // [Second 32 bytes]
    0x60
    mstore

    0x696e742063696c6c756d2073696e7420636f6e73656374657475722063757069  // [Third 32 bytes]
    0x80
    mstore

    __RIGHTPAD(0x64617461742e)  // [Last 6 bytes]
    0xA0
    mstore

    // return full 166 bytes
    0xA6 // [0xA6] 
    0x00 // [0x00, 0xA6] 
    return
}

/// ## Recover Call
/// 
/// ### Calldata Layout
/// 
/// `selector`
/// 
/// | name     | size (bytes) |
/// | -------- | ------------ |
/// | selector | 4            |
/// | hash     | 32           |
/// | v        | 32           |
/// | r        | 32           |
/// | s        | 32           |
#define macro RECOVER() = takes(0) returns (0) {
    0x64 calldataload               // [s]
    0x44 calldataload               // [r, s]
    0x24 calldataload               // [v, r ,s]
    0x04 calldataload               // [hash, v, r, s]
    TO_ETH_SIGNED_MSG_HASH()        // [prefixedHash, v, r, s]
    ECRECOVER()                     // [result]
    0x00 mstore                     // []
    0x20 0x00 return
}

/// ## Prefix Message Call
/// 
/// ### Calldata Layout
/// 
/// `selector`
/// 
/// | name     | size (bytes) |
/// | -------- | ------------ |
/// | selector | 4            |
/// | hash     | 32           |
#define macro PREFIX_MESSAGE() = takes(0) returns(0) {
    0x04 calldataload               // [hash]
    TO_ETH_SIGNED_MSG_HASH()        // [prefixedHash]
    0x00 mstore                     // []
    0x20 0x00 return
}

/// ## Receive Call
/// 
/// ### Calldata Layout
/// 
/// `selector`
/// 
/// | name     | size (bytes) |
/// | -------- | ------------ |
/// | selector | 4            |
/// | hash     | 32           |
#define macro RECEIVE() = takes (0) returns (0) {
    callvalue                       // [msg.value]
    0x00 mstore                     // []
    caller                          // [msg.sender]
    __EVENT_HASH(ReceivedPayment)   // [event_sig, msg.sender]
    0x20 0x00                       // [0x00, 0x20, event_sig, msg.sender]
    log2                            // []

    0x00 0x00 return
}

